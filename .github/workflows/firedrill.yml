name: Firedrill Workflow

on:
  push:
    branches:
      - test-framework
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

#      - name: Build and run Docker Compose
#        env:
#          HOP_USERNAME: ${{ secrets.username }}
#          HOP_PASSWORD: ${{ secrets.password }}
#        run: |
#          docker compose build --build-arg HOP_USERNAME=${{ secrets.username }} --build-arg HOP_PASSWORD=${{ secrets.password }}
#          docker compose up -d --force-recreate
#          echo "Waiting for services to start..."
#          sleep 3
#          docker exec publishing_tools_publisher snews_pt publish /app/snews_pt/test/firedrill_combined_message.json --firedrill
#          docker exec publishing_tools_publisher snews_pt publish /app/snews_pt/test/firedrill_combined_message2.json --firedrill
#          echo "Messages Sent"
      - name: Build and run Docker Compose
        env:
          HOP_USERNAME: ${{ secrets.username }}
          HOP_PASSWORD: ${{ secrets.password }}
        run: |
          docker compose build --build-arg HOP_USERNAME=${{ secrets.username }} --build-arg HOP_PASSWORD=${{ secrets.password }}
          docker compose up -d --force-recreate
          echo "Waiting for services to start..."
          sleep 3
      - name: Wait for coincidence_system to initialize
        run: |
          echo "Waiting for coincidence_system to initialize..."
          for i in {1..30}; do
            if docker logs coincidence_system 2>&1 | grep -q "(re)Initializing Coincidence System for kafka://kafka.scimma.org/snews.experiments-firedrill"; then
              echo "Coincidence System is ready."
              break
            fi
            echo "Still waiting for Coincidence System to initialize..."
            sleep 2
          done
      - name: Publish messages
        run: |
          echo "Publishing messages..."
          docker exec publishing_tools_publisher snews_pt publish /app/snews_pt/test/firedrill_combined_message.json --firedrill
          docker exec publishing_tools_publisher snews_pt publish /app/snews_pt/test/firedrill_combined_message2.json --firedrill
          sleep 5
#          for i in {1..30}; do
#            if docker logs publishing_tools_subscriber 2>&1 | grep -q "Here is the alert dictionary I received"; then
#              echo "Subscriber processed the messages."
#              break
#            fi
#            echo "Still waiting for subscriber to process messages..."
#            sleep 2
#          done

      - name: Verify alert publishing from coincidence_system
        run: |
          echo "Checking logs of coincidence_system..."
          docker logs coincidence_system > coincidence_logs.txt
          if ! grep -q "An alert was published" coincidence_logs.txt; then
            echo "Published messages did not run or produce the expected output."
            cat coincidence_logs.txt
            exit 1
          fi
          echo "Coincidence_system ran successfully and produced the expected output."
          sleep 5

      - name: Verify custom script output
        run: |
          echo "Checking logs of publishing_tools_subscriber..."
          docker logs publishing_tools_subscriber > subscriber_logs.txt
          if ! grep -q "Here is the alert dictionary I received" subscriber_logs.txt; then
            echo "Custom script did not run or produce the expected output."
            cat subscriber_logs.txt
            exit 1
          fi
          echo "Custom script ran successfully and produced the expected output."
          


#      - name: Verify alert publishing from coincidence_system
#        run: |
#          echo "Checking logs of coincidence_system..."
#          docker logs coincidence_system > coincidence_logs.txt
#          if ! grep -q "An alert was published" coincidence_logs.txt; then
#            echo "Published messages did not run or produce the expected output."
#            cat coincidence_logs.txt
#            exit 1
#          fi
#          echo "Coincidence_system ran successfully and produced the expected output."
#      - name: Verify custom script output
#        run: |
#          echo "Checking logs of publishing_tools_subscriber..."
#          docker logs publishing_tools_subscriber > subscriber_logs.txt
#          if ! grep -q "Here is the alert dictionary I received" subscriber_logs.txt; then
#            echo "Custom script did not run or produce the expected output."
#            cat subscriber_logs.txt
#            exit 1
#          fi
#          echo "Custom script ran successfully and produced the expected output."
